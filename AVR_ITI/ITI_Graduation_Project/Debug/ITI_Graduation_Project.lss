
ITI_Graduation_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000232  00800060  000021c2  00002236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002598  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011c2  00000000  00000000  00004a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000089a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000098b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a30f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <main>
      7a:	0c 94 df 10 	jmp	0x21be	; 0x21be <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e1       	ldi	r26, 0x12	; 18
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e1       	ldi	r24, 0x12	; 18
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 af 10 	jmp	0x215e	; 0x215e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <UART_Init>:
 * Author: Asmaa & Renad & Arwa
 */

#include "UART_Interface.h"
void UART_Init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	/* 1- Set Baud Rate */
	UART_SetBaudRate(BOUD_RATE);
     b3e:	83 e3       	ldi	r24, 0x33	; 51
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 69 06 	call	0xcd2	; 0xcd2 <UART_SetBaudRate>

	/* 2- Set mode, data bits, parity, and stop bits */
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     b46:	a0 e4       	ldi	r26, 0x40	; 64
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	e0 e4       	ldi	r30, 0x40	; 64
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	86 68       	ori	r24, 0x86	; 134
     b52:	8c 93       	st	X, r24

	/* 3- Enable Transmitter */
	UART_EnableTx();
     b54:	0e 94 6f 07 	call	0xede	; 0xede <UART_EnableTx>

	/* 4- Enable Receiver */
	UART_EnableRx();
     b58:	0e 94 8b 07 	call	0xf16	; 0xf16 <UART_EnableRx>

	/* 5- Disable all interrupts */
	UART_DisableTxInterrupt();
     b5c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <UART_DisableTxInterrupt>
	UART_DisableRxInterrupt();
     b60:	0e 94 cb 07 	call	0xf96	; 0xf96 <UART_DisableRxInterrupt>
	UART_DisableDataEmptyInterrupt();
     b64:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <UART_DisableDataEmptyInterrupt>
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <UART_SetParity>:

void UART_SetParity(u8 parity)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <UART_SetParity+0x6>
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
	switch(parity)
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	3b 83       	std	Y+3, r19	; 0x03
     b84:	2a 83       	std	Y+2, r18	; 0x02
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	c1 f0       	breq	.+48     	; 0xbc0 <UART_SetParity+0x52>
     b90:	2a 81       	ldd	r18, Y+2	; 0x02
     b92:	3b 81       	ldd	r19, Y+3	; 0x03
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	11 f1       	breq	.+68     	; 0xbde <UART_SetParity+0x70>
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	9b 81       	ldd	r25, Y+3	; 0x03
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	61 f5       	brne	.+88     	; 0xbfa <UART_SetParity+0x8c>
	{
		case NO_PARITY:
			CLEAR_BIT(UCSRC, UPM0);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7e       	andi	r24, 0xEF	; 239
     bae:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UPM1);
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	8c 93       	st	X, r24
     bbe:	1d c0       	rjmp	.+58     	; 0xbfa <UART_SetParity+0x8c>
			break;
		case EVEN_PARITY:
			CLEAR_BIT(UCSRC, UPM0);
     bc0:	a0 e4       	ldi	r26, 0x40	; 64
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e0 e4       	ldi	r30, 0x40	; 64
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7e       	andi	r24, 0xEF	; 239
     bcc:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UPM1);
     bce:	a0 e4       	ldi	r26, 0x40	; 64
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e0 e4       	ldi	r30, 0x40	; 64
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 62       	ori	r24, 0x20	; 32
     bda:	8c 93       	st	X, r24
     bdc:	0e c0       	rjmp	.+28     	; 0xbfa <UART_SetParity+0x8c>
			break;
		case ODD_PARITY:
			SET_BIT(UCSRC, UPM0);
     bde:	a0 e4       	ldi	r26, 0x40	; 64
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e0 e4       	ldi	r30, 0x40	; 64
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 61       	ori	r24, 0x10	; 16
     bea:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UPM1);
     bec:	a0 e4       	ldi	r26, 0x40	; 64
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e0 e4       	ldi	r30, 0x40	; 64
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 62       	ori	r24, 0x20	; 32
     bf8:	8c 93       	st	X, r24
			break;
		default:
			/* error handling */
			break;
	}
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <UART_SetStopBits>:

void UART_SetStopBits(u8 noOfStopBits)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <UART_SetStopBits+0x6>
     c0c:	0f 92       	push	r0
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
	switch(noOfStopBits)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	3b 83       	std	Y+3, r19	; 0x03
     c1c:	2a 83       	std	Y+2, r18	; 0x02
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	31 f0       	breq	.+12     	; 0xc32 <UART_SetStopBits+0x2c>
     c26:	2a 81       	ldd	r18, Y+2	; 0x02
     c28:	3b 81       	ldd	r19, Y+3	; 0x03
     c2a:	21 30       	cpi	r18, 0x01	; 1
     c2c:	31 05       	cpc	r19, r1
     c2e:	49 f0       	breq	.+18     	; 0xc42 <UART_SetStopBits+0x3c>
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <UART_SetStopBits+0x4a>
	{
		case ONE_STOP_BIT:
			CLEAR_BIT(UCSRC, USBS);
     c32:	a0 e4       	ldi	r26, 0x40	; 64
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e0 e4       	ldi	r30, 0x40	; 64
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	8c 93       	st	X, r24
     c40:	07 c0       	rjmp	.+14     	; 0xc50 <UART_SetStopBits+0x4a>
			break;
		case TWO_STOP_BIT:
			SET_BIT(UCSRC, USBS);
     c42:	a0 e4       	ldi	r26, 0x40	; 64
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e0 e4       	ldi	r30, 0x40	; 64
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	88 60       	ori	r24, 0x08	; 8
     c4e:	8c 93       	st	X, r24
			break;
		default:
			/* error handling */
			break;
	}
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <UART_SetDataBits>:

void UART_SetDataBits(u8 noOfDataBits)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <UART_SetDataBits+0x6>
     c62:	0f 92       	push	r0
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	89 83       	std	Y+1, r24	; 0x01
	switch(noOfDataBits)
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	3b 83       	std	Y+3, r19	; 0x03
     c72:	2a 83       	std	Y+2, r18	; 0x02
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	91 05       	cpc	r25, r1
     c7c:	21 f1       	breq	.+72     	; 0xcc6 <UART_SetDataBits+0x6a>
     c7e:	2a 81       	ldd	r18, Y+2	; 0x02
     c80:	3b 81       	ldd	r19, Y+3	; 0x03
     c82:	22 30       	cpi	r18, 0x02	; 2
     c84:	31 05       	cpc	r19, r1
     c86:	fc f0       	brlt	.+62     	; 0xcc6 <UART_SetDataBits+0x6a>
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	9b 81       	ldd	r25, Y+3	; 0x03
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	91 05       	cpc	r25, r1
     c90:	d1 f0       	breq	.+52     	; 0xcc6 <UART_SetDataBits+0x6a>
     c92:	2a 81       	ldd	r18, Y+2	; 0x02
     c94:	3b 81       	ldd	r19, Y+3	; 0x03
     c96:	23 30       	cpi	r18, 0x03	; 3
     c98:	31 05       	cpc	r19, r1
     c9a:	a9 f4       	brne	.+42     	; 0xcc6 <UART_SetDataBits+0x6a>
			break;
		case DATA_BITS_7:
			/* code for 7 data bits */
			break;
		case DATA_BITS_8:
			SET_BIT(UCSRC, UCSZ0);
     c9c:	a0 e4       	ldi	r26, 0x40	; 64
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e0 e4       	ldi	r30, 0x40	; 64
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	82 60       	ori	r24, 0x02	; 2
     ca8:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
     caa:	a0 e4       	ldi	r26, 0x40	; 64
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e0 e4       	ldi	r30, 0x40	; 64
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
     cb8:	aa e2       	ldi	r26, 0x2A	; 42
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ea e2       	ldi	r30, 0x2A	; 42
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8b 7f       	andi	r24, 0xFB	; 251
     cc4:	8c 93       	st	X, r24
			break;
		default:
			/* error handling */
			break;
	}
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <UART_SetBaudRate>:

void UART_SetBaudRate(u16 baud)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <UART_SetBaudRate+0x6>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8) baud;
     ce0:	e9 e2       	ldi	r30, 0x29	; 41
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	80 83       	st	Z, r24
	if (baud > 255)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	8f 3f       	cpi	r24, 0xFF	; 255
     cee:	91 05       	cpc	r25, r1
     cf0:	79 f0       	breq	.+30     	; 0xd10 <UART_SetBaudRate+0x3e>
     cf2:	70 f0       	brcs	.+28     	; 0xd10 <UART_SetBaudRate+0x3e>
	{
		CLEAR_BIT(UCSRC, URSEL);
     cf4:	a0 e4       	ldi	r26, 0x40	; 64
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e0 e4       	ldi	r30, 0x40	; 64
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8f 77       	andi	r24, 0x7F	; 127
     d00:	8c 93       	st	X, r24
		UBRRH = (u8)(baud >> 8);
     d02:	e0 e4       	ldi	r30, 0x40	; 64
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	89 2f       	mov	r24, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	80 83       	st	Z, r24
	}
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <UART_SetMode>:

void UART_SetMode(u8 synchMode, u8 speed)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <UART_SetMode+0x6>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <UART_SetMode+0x8>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <UART_SetMode+0xa>
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	6a 83       	std	Y+2, r22	; 0x02
	switch(speed)
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	3e 83       	std	Y+6, r19	; 0x06
     d34:	2d 83       	std	Y+5, r18	; 0x05
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	31 f0       	breq	.+12     	; 0xd4a <UART_SetMode+0x30>
     d3e:	2d 81       	ldd	r18, Y+5	; 0x05
     d40:	3e 81       	ldd	r19, Y+6	; 0x06
     d42:	21 30       	cpi	r18, 0x01	; 1
     d44:	31 05       	cpc	r19, r1
     d46:	49 f0       	breq	.+18     	; 0xd5a <UART_SetMode+0x40>
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <UART_SetMode+0x4e>
	{
		case NORMAL_SPEED:
			CLEAR_BIT(UCSRA, U2X);
     d4a:	ab e2       	ldi	r26, 0x2B	; 43
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	eb e2       	ldi	r30, 0x2B	; 43
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8d 7f       	andi	r24, 0xFD	; 253
     d56:	8c 93       	st	X, r24
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <UART_SetMode+0x4e>
			break;
		case DOUBLE_SPEED:
			SET_BIT(UCSRA, U2X);
     d5a:	ab e2       	ldi	r26, 0x2B	; 43
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	eb e2       	ldi	r30, 0x2B	; 43
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	82 60       	ori	r24, 0x02	; 2
     d66:	8c 93       	st	X, r24
		default:
			/* error handling */
			break;
	}

	switch(synchMode)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3c 83       	std	Y+4, r19	; 0x04
     d70:	2b 83       	std	Y+3, r18	; 0x03
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	31 f0       	breq	.+12     	; 0xd86 <UART_SetMode+0x6c>
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	3c 81       	ldd	r19, Y+4	; 0x04
     d7e:	21 30       	cpi	r18, 0x01	; 1
     d80:	31 05       	cpc	r19, r1
     d82:	49 f0       	breq	.+18     	; 0xd96 <UART_SetMode+0x7c>
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <UART_SetMode+0x8a>
	{
		case UART_ASYNCH:
			CLEAR_BIT(UCSRC, UMSEL);
     d86:	a0 e4       	ldi	r26, 0x40	; 64
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e0 e4       	ldi	r30, 0x40	; 64
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8f 7b       	andi	r24, 0xBF	; 191
     d92:	8c 93       	st	X, r24
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <UART_SetMode+0x8a>
			break;
		case UART_SYNCH:
			SET_BIT(UCSRC, UMSEL);
     d96:	a0 e4       	ldi	r26, 0x40	; 64
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e0 e4       	ldi	r30, 0x40	; 64
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 64       	ori	r24, 0x40	; 64
     da2:	8c 93       	st	X, r24
			break;
		default:
			/* error handling */
			break;
	}
}
     da4:	26 96       	adiw	r28, 0x06	; 6
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <UART_TransmitData>:

void UART_TransmitData(u16 data)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <UART_TransmitData+0x6>
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA, UDRE));  // Wait until the data register is empty
     dc4:	eb e2       	ldi	r30, 0x2B	; 43
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	82 95       	swap	r24
     dcc:	86 95       	lsr	r24
     dce:	87 70       	andi	r24, 0x07	; 7
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	81 70       	andi	r24, 0x01	; 1
     dd6:	90 70       	andi	r25, 0x00	; 0
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	a1 f3       	breq	.-24     	; 0xdc4 <UART_TransmitData+0xe>
	UDR = data;
     ddc:	ec e2       	ldi	r30, 0x2C	; 44
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	80 83       	st	Z, r24
		else
		{
			CLEAR_BIT(UCSRB, TXB8);
		}
	}
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <UART_TransmitString>:

void UART_TransmitString(const char* str)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <UART_TransmitString+0x6>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	0c c0       	rjmp	.+24     	; 0xe16 <UART_TransmitString+0x28>
	while (*str)
	{
		UART_TransmitData(*str);
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	80 81       	ld	r24, Z
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 db 06 	call	0xdb6	; 0xdb6 <UART_TransmitData>
		str++;
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
	}
}

void UART_TransmitString(const char* str)
{
	while (*str)
     e16:	e9 81       	ldd	r30, Y+1	; 0x01
     e18:	fa 81       	ldd	r31, Y+2	; 0x02
     e1a:	80 81       	ld	r24, Z
     e1c:	88 23       	and	r24, r24
     e1e:	79 f7       	brne	.-34     	; 0xdfe <UART_TransmitString+0x10>
	{
		UART_TransmitData(*str);
		str++;
	}
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <UART_ReceiveData>:

u16 UART_ReceiveData(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <UART_ReceiveData+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	u16 retData = 0;
     e34:	1a 82       	std	Y+2, r1	; 0x02
     e36:	19 82       	std	Y+1, r1	; 0x01

	while(GET_BIT(UCSRA, RXC) == 0);  // Wait until data is received
     e38:	eb e2       	ldi	r30, 0x2B	; 43
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	88 23       	and	r24, r24
     e40:	dc f7       	brge	.-10     	; 0xe38 <UART_ReceiveData+0xe>

	retData = UDR;
     e42:	ec e2       	ldi	r30, 0x2C	; 44
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01

	// Handle 9-bit data mode if necessary
	// if (DATA_BITS == DATA_BITS_9) { ... }

	return retData;
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <UART_ReceiveString>:

void UART_ReceiveString(char* buffer, u8 maxLength)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <UART_ReceiveString+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <UART_ReceiveString+0x8>
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
     e70:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0;
     e72:	1a 82       	std	Y+2, r1	; 0x02
	char receivedChar = '\0';
     e74:	19 82       	std	Y+1, r1	; 0x01

	// Receive characters until newline, carriage return, or buffer is full
	do {
		receivedChar = UART_ReceiveData();
     e76:	0e 94 15 07 	call	0xe2a	; 0xe2a <UART_ReceiveData>
     e7a:	89 83       	std	Y+1, r24	; 0x01
		buffer[i] = receivedChar;
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	fc 01       	movw	r30, r24
     e88:	e2 0f       	add	r30, r18
     e8a:	f3 1f       	adc	r31, r19
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 83       	st	Z, r24
		i++;
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	8a 83       	std	Y+2, r24	; 0x02
	} while ((receivedChar != '\n') && (receivedChar != '\r') && (i < (maxLength - 1)));
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	8a 30       	cpi	r24, 0x0A	; 10
     e9a:	69 f0       	breq	.+26     	; 0xeb6 <UART_ReceiveString+0x58>
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8d 30       	cpi	r24, 0x0D	; 13
     ea0:	51 f0       	breq	.+20     	; 0xeb6 <UART_ReceiveString+0x58>
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	28 17       	cp	r18, r24
     eb2:	39 07       	cpc	r19, r25
     eb4:	04 f3       	brlt	.-64     	; 0xe76 <UART_ReceiveString+0x18>

	buffer[i-1] = '\0';  // Null-terminate the string
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 01       	movw	r18, r24
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	30 40       	sbci	r19, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	fc 01       	movw	r30, r24
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	10 82       	st	Z, r1
}
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <UART_EnableTx>:

void UART_EnableTx(void)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
    // Enable the UART transmitter
    // This sets the TXEN bit in UCSRB (USART Control and Status Register B)
    // Allowing the UART module to transmit data
    SET_BIT(UCSRB, TXEN);
     ee6:	aa e2       	ldi	r26, 0x2A	; 42
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ea e2       	ldi	r30, 0x2A	; 42
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 60       	ori	r24, 0x08	; 8
     ef2:	8c 93       	st	X, r24
}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <UART_DisableTx>:

void UART_DisableTx(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
    // Disable the UART transmitter
    // This clears the TXEN bit in UCSRB (USART Control and Status Register B)
    // Preventing the UART module from transmitting data
    CLEAR_BIT(UCSRB, TXEN);
     f02:	aa e2       	ldi	r26, 0x2A	; 42
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ea e2       	ldi	r30, 0x2A	; 42
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	8c 93       	st	X, r24
}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <UART_EnableRx>:

void UART_EnableRx(void)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
    // Enable the UART receiver
    // This sets the RXEN bit in UCSRB (USART Control and Status Register B)
    // Allowing the UART module to receive data
    SET_BIT(UCSRB, RXEN);
     f1e:	aa e2       	ldi	r26, 0x2A	; 42
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ea e2       	ldi	r30, 0x2A	; 42
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 61       	ori	r24, 0x10	; 16
     f2a:	8c 93       	st	X, r24
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <UART_DisableRx>:

void UART_DisableRx(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
    // Disable the UART receiver
    // This clears the RXEN bit in UCSRB (USART Control and Status Register B)
    // Preventing the UART module from receiving data
    CLEAR_BIT(UCSRB, RXEN);
     f3a:	aa e2       	ldi	r26, 0x2A	; 42
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e2       	ldi	r30, 0x2A	; 42
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8f 7e       	andi	r24, 0xEF	; 239
     f46:	8c 93       	st	X, r24
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <UART_ReceiveByte>:

// Function to receive a byte via UART
u8 UART_ReceiveByte(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
    // Wait for data to be received
    while (!(UCSRA & (1 << RXC)));
     f56:	eb e2       	ldi	r30, 0x2B	; 43
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <UART_ReceiveByte+0x8>

    // Get and return received data from the buffer
    return UDR;
     f60:	ec e2       	ldi	r30, 0x2C	; 44
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <UART_EnableTxInterrupt>:


void UART_EnableTxInterrupt(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	// Implementation of enabling TX interrupt
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <UART_DisableTxInterrupt>:

void UART_DisableTxInterrupt(void)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	// Implementation of disabling TX interrupt
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_EnableRxInterrupt>:

void UART_EnableRxInterrupt(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	// Implementation of enabling RX interrupt
}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <UART_DisableRxInterrupt>:

void UART_DisableRxInterrupt(void)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	// Implementation of disabling RX interrupt
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_EnableDataEmptyInterrupt>:

void UART_EnableDataEmptyInterrupt(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	// Implementation of enabling Data Empty interrupt
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <UART_DisableDataEmptyInterrupt>:

void UART_DisableDataEmptyInterrupt(void)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	// Implementation of disabling Data Empty interrupt
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <TIMER0_init>:
 *
 * @param None
 * @return void
 */
void TIMER0_init(void)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
            SET_BIT(TCCR0, WGM01); // Set WGM01 bit to 1 for CTC mode
            /* ENABLE COMPARE MATCH INTERRUPT */
            TIMER0_IntrrupetEnable_OC(); // Enable Timer0 compare match interrupt
            break;
        case TIMER0_FASTPWM_MODE:
            SET_BIT(TCCR0, WGM00); // Set WGM00 bit to 1 for FASTPWM mode
     fc8:	a3 e5       	ldi	r26, 0x53	; 83
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, WGM01); // Set WGM01 bit to 1 for FASTPWM mode
     fd6:	a3 e5       	ldi	r26, 0x53	; 83
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e5       	ldi	r30, 0x53	; 83
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	8c 93       	st	X, r24
        default:
            break; // Do nothing if mode is not recognized
    }

    /* SET INITIAL VALUE */
    TIMER0_Preload(TIMER0_INITIAL_VALUE); // Load the initial value into Timer0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <TIMER0_Preload>
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TIMER0_Start>:
 *
 * @param None
 * @return void
 */
void TIMER0_Start(void)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
        case TIMER0_SCALER_1024:
            SET_BIT(TCCR0, CS00); // Set CS00 bit to 1
            SET_BIT(TCCR0, CS02); // Set CS02 bit to 1 for prescaler 1024
            break;
        case TIMER0_SCALER_256:
            SET_BIT(TCCR0, CS02); // Set CS02 bit to 1 for prescaler 256
     ff8:	a3 e5       	ldi	r26, 0x53	; 83
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	8c 93       	st	X, r24
            SET_BIT(TCCR0, CS02); // Set CS02 bit to 1 for external clock on falling edge
            break;
        default:
            break; // Do nothing if prescaler is not recognized
    }
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <FAST_PWM_MODE>:
 *
 * @param None
 * @return void
 */
void FAST_PWM_MODE(void)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
        case NON_INVERTING:
            CLEAR_BIT(TCCR0, COM00); // Set COM00 bit to 0 for non-inverting mode
            SET_BIT(TCCR0, COM01);   // Set COM01 bit to 1 for non-inverting mode
            break;
        case INVERTING:
            SET_BIT(TCCR0, COM00);   // Set COM00 bit to 1 for inverting mode
    1014:	a3 e5       	ldi	r26, 0x53	; 83
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e3 e5       	ldi	r30, 0x53	; 83
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 61       	ori	r24, 0x10	; 16
    1020:	8c 93       	st	X, r24
            SET_BIT(TCCR0, COM01);   // Set COM01 bit to 1 for inverting mode
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 62       	ori	r24, 0x20	; 32
    102e:	8c 93       	st	X, r24
            break;
        default:
            break; // Do nothing if PWM mode is not recognized
    }
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <TIMER0_IntrrupetEnable_OV>:
 *
 * @param None
 * @return void
 */
void TIMER0_IntrrupetEnable_OV(void)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE0); // Enable Timer0 overflow interrupt
    103e:	a9 e5       	ldi	r26, 0x59	; 89
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e9 e5       	ldi	r30, 0x59	; 89
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	81 60       	ori	r24, 0x01	; 1
    104a:	8c 93       	st	X, r24
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <TIMER0_IntrrupetDisable_OV>:
 *
 * @param None
 * @return void
 */
void TIMER0_IntrrupetDisable_OV(void)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE0); // Disable Timer0 overflow interrupt
    105a:	a9 e5       	ldi	r26, 0x59	; 89
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e9 e5       	ldi	r30, 0x59	; 89
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	8c 93       	st	X, r24
}
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <TIMER0_IntrrupetEnable_OC>:
 *
 * @param None
 * @return void
 */
void TIMER0_IntrrupetEnable_OC(void)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE0); // Enable Timer0 compare match interrupt
    1076:	a9 e5       	ldi	r26, 0x59	; 89
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e9 e5       	ldi	r30, 0x59	; 89
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	82 60       	ori	r24, 0x02	; 2
    1082:	8c 93       	st	X, r24
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <TIMER0_IntrrupetDisable_OC>:
 *
 * @param None
 * @return void
 */
void TIMER0_IntrrupetDisable_OC(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE0); // Disable Timer0 compare match interrupt
    1092:	a9 e5       	ldi	r26, 0x59	; 89
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e9 e5       	ldi	r30, 0x59	; 89
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8d 7f       	andi	r24, 0xFD	; 253
    109e:	8c 93       	st	X, r24
}
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <TIMER0_Stop>:
 *
 * @param None
 * @return void
 */
void TIMER0_Stop(void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = 0x00; // Clear TCCR0 register to stop Timer0
    10ae:	e3 e5       	ldi	r30, 0x53	; 83
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	10 82       	st	Z, r1
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <TIMER0_Preload>:
 *
 * @param preload (IN) - Value to preload into Timer0 (0-255)
 * @return void
 */
void TIMER0_Preload(u8 preload)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	0f 92       	push	r0
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = preload; // Load the preload value into TCNT0 register
    10c6:	e2 e5       	ldi	r30, 0x52	; 82
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	80 83       	st	Z, r24
}
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <TIMER0_OC_Value>:
 *
 * @param value (IN) - Value to set in OCR0 register (0-255)
 * @return void
 */
void TIMER0_OC_Value(u8 value)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = value; // Load the compare value into OCR0 register
    10e2:	ec e5       	ldi	r30, 0x5C	; 92
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	80 83       	st	Z, r24
}
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <vSet_Pin_Direction>:
 * @param Direction (IN) The direction of the pin (INPUT or OUTPUT).
 *
 * @return void
 */
void vSet_Pin_Direction(u8 PORT_ID , u8 PIN_ID , u8 Direction)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	29 97       	sbiw	r28, 0x09	; 9
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6a 83       	std	Y+2, r22	; 0x02
    110a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Direction)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	39 87       	std	Y+9, r19	; 0x09
    1114:	28 87       	std	Y+8, r18	; 0x08
    1116:	88 85       	ldd	r24, Y+8	; 0x08
    1118:	99 85       	ldd	r25, Y+9	; 0x09
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	09 f4       	brne	.+2      	; 0x1120 <vSet_Pin_Direction+0x2e>
    111e:	75 c0       	rjmp	.+234    	; 0x120a <vSet_Pin_Direction+0x118>
    1120:	28 85       	ldd	r18, Y+8	; 0x08
    1122:	39 85       	ldd	r19, Y+9	; 0x09
    1124:	21 30       	cpi	r18, 0x01	; 1
    1126:	31 05       	cpc	r19, r1
    1128:	09 f0       	breq	.+2      	; 0x112c <vSet_Pin_Direction+0x3a>
    112a:	e2 c0       	rjmp	.+452    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
	{
	case OUTPUT: // Set pin as output
		switch(PORT_ID)
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3f 83       	std	Y+7, r19	; 0x07
    1134:	2e 83       	std	Y+6, r18	; 0x06
    1136:	8e 81       	ldd	r24, Y+6	; 0x06
    1138:	9f 81       	ldd	r25, Y+7	; 0x07
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	91 05       	cpc	r25, r1
    113e:	49 f1       	breq	.+82     	; 0x1192 <vSet_Pin_Direction+0xa0>
    1140:	2e 81       	ldd	r18, Y+6	; 0x06
    1142:	3f 81       	ldd	r19, Y+7	; 0x07
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	2c f4       	brge	.+10     	; 0x1154 <vSet_Pin_Direction+0x62>
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	61 f0       	breq	.+24     	; 0x116a <vSet_Pin_Direction+0x78>
    1152:	ce c0       	rjmp	.+412    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
    1154:	2e 81       	ldd	r18, Y+6	; 0x06
    1156:	3f 81       	ldd	r19, Y+7	; 0x07
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	71 f1       	breq	.+92     	; 0x11ba <vSet_Pin_Direction+0xc8>
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	91 05       	cpc	r25, r1
    1166:	e9 f1       	breq	.+122    	; 0x11e2 <vSet_Pin_Direction+0xf0>
    1168:	c3 c0       	rjmp	.+390    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		{
		case PORT_A: SET_BIT(DDRA, PIN_ID); break;
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vSet_Pin_Direction+0x96>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <vSet_Pin_Direction+0x92>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	af c0       	rjmp	.+350    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		case PORT_B: SET_BIT(DDRB, PIN_ID); break;
    1192:	a7 e3       	ldi	r26, 0x37	; 55
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vSet_Pin_Direction+0xbe>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <vSet_Pin_Direction+0xba>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	9b c0       	rjmp	.+310    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		case PORT_C: SET_BIT(DDRC, PIN_ID); break;
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <vSet_Pin_Direction+0xe6>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <vSet_Pin_Direction+0xe2>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	87 c0       	rjmp	.+270    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		case PORT_D: SET_BIT(DDRD, PIN_ID); break;
    11e2:	a1 e3       	ldi	r26, 0x31	; 49
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e1 e3       	ldi	r30, 0x31	; 49
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <vSet_Pin_Direction+0x10e>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <vSet_Pin_Direction+0x10a>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	73 c0       	rjmp	.+230    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		}
		break;

	case INPUT: // Set pin as input
		switch(PORT_ID)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 83       	std	Y+5, r19	; 0x05
    1212:	2c 83       	std	Y+4, r18	; 0x04
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	59 f1       	breq	.+86     	; 0x1274 <vSet_Pin_Direction+0x182>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	2c f4       	brge	.+10     	; 0x1232 <vSet_Pin_Direction+0x140>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f0       	breq	.+26     	; 0x124a <vSet_Pin_Direction+0x158>
    1230:	5f c0       	rjmp	.+190    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	89 f1       	breq	.+98     	; 0x129e <vSet_Pin_Direction+0x1ac>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <vSet_Pin_Direction+0x156>
    1246:	40 c0       	rjmp	.+128    	; 0x12c8 <vSet_Pin_Direction+0x1d6>
    1248:	53 c0       	rjmp	.+166    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		{
		case PORT_A: CLEAR_BIT(DDRA, PIN_ID); break;
    124a:	aa e3       	ldi	r26, 0x3A	; 58
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vSet_Pin_Direction+0x176>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <vSet_Pin_Direction+0x172>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	3e c0       	rjmp	.+124    	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		case PORT_B: CLEAR_BIT(DDRB, PIN_ID); break;
    1274:	a7 e3       	ldi	r26, 0x37	; 55
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e7 e3       	ldi	r30, 0x37	; 55
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <vSet_Pin_Direction+0x1a0>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <vSet_Pin_Direction+0x19c>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	29 c0       	rjmp	.+82     	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		case PORT_C: CLEAR_BIT(DDRC, PIN_ID); break;
    129e:	a4 e3       	ldi	r26, 0x34	; 52
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e4 e3       	ldi	r30, 0x34	; 52
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vSet_Pin_Direction+0x1ca>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <vSet_Pin_Direction+0x1c6>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	14 c0       	rjmp	.+40     	; 0x12f0 <vSet_Pin_Direction+0x1fe>
		case PORT_D: CLEAR_BIT(DDRD, PIN_ID); break;
    12c8:	a1 e3       	ldi	r26, 0x31	; 49
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e1 e3       	ldi	r30, 0x31	; 49
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <vSet_Pin_Direction+0x1f4>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <vSet_Pin_Direction+0x1f0>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
		}
		break;
	}
}
    12f0:	29 96       	adiw	r28, 0x09	; 9
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <vSet_Pin_OUTPUTvalue>:
 * @param Value   (IN) The value to be set (HIGH or LOW).
 *
 * @return void
 */
void vSet_Pin_OUTPUTvalue(u8 PORT_ID , u8 PIN_ID , u8 Value)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	29 97       	sbiw	r28, 0x09	; 9
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	6a 83       	std	Y+2, r22	; 0x02
    131a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Value)
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	39 87       	std	Y+9, r19	; 0x09
    1324:	28 87       	std	Y+8, r18	; 0x08
    1326:	88 85       	ldd	r24, Y+8	; 0x08
    1328:	99 85       	ldd	r25, Y+9	; 0x09
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	09 f4       	brne	.+2      	; 0x1330 <vSet_Pin_OUTPUTvalue+0x2e>
    132e:	75 c0       	rjmp	.+234    	; 0x141a <vSet_Pin_OUTPUTvalue+0x118>
    1330:	28 85       	ldd	r18, Y+8	; 0x08
    1332:	39 85       	ldd	r19, Y+9	; 0x09
    1334:	21 30       	cpi	r18, 0x01	; 1
    1336:	31 05       	cpc	r19, r1
    1338:	09 f0       	breq	.+2      	; 0x133c <vSet_Pin_OUTPUTvalue+0x3a>
    133a:	e2 c0       	rjmp	.+452    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
	{
	case HIGH: // Set pin output to high
		switch(PORT_ID)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3f 83       	std	Y+7, r19	; 0x07
    1344:	2e 83       	std	Y+6, r18	; 0x06
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	49 f1       	breq	.+82     	; 0x13a2 <vSet_Pin_OUTPUTvalue+0xa0>
    1350:	2e 81       	ldd	r18, Y+6	; 0x06
    1352:	3f 81       	ldd	r19, Y+7	; 0x07
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	2c f4       	brge	.+10     	; 0x1364 <vSet_Pin_OUTPUTvalue+0x62>
    135a:	8e 81       	ldd	r24, Y+6	; 0x06
    135c:	9f 81       	ldd	r25, Y+7	; 0x07
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	61 f0       	breq	.+24     	; 0x137a <vSet_Pin_OUTPUTvalue+0x78>
    1362:	ce c0       	rjmp	.+412    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
    1364:	2e 81       	ldd	r18, Y+6	; 0x06
    1366:	3f 81       	ldd	r19, Y+7	; 0x07
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	71 f1       	breq	.+92     	; 0x13ca <vSet_Pin_OUTPUTvalue+0xc8>
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	9f 81       	ldd	r25, Y+7	; 0x07
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	91 05       	cpc	r25, r1
    1376:	e9 f1       	breq	.+122    	; 0x13f2 <vSet_Pin_OUTPUTvalue+0xf0>
    1378:	c3 c0       	rjmp	.+390    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		{
		case PORT_A: SET_BIT(PORTA, PIN_ID); break;
    137a:	ab e3       	ldi	r26, 0x3B	; 59
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <vSet_Pin_OUTPUTvalue+0x96>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <vSet_Pin_OUTPUTvalue+0x92>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	af c0       	rjmp	.+350    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		case PORT_B: SET_BIT(PORTB, PIN_ID); break;
    13a2:	a8 e3       	ldi	r26, 0x38	; 56
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e8 e3       	ldi	r30, 0x38	; 56
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <vSet_Pin_OUTPUTvalue+0xbe>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <vSet_Pin_OUTPUTvalue+0xba>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	9b c0       	rjmp	.+310    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		case PORT_C: SET_BIT(PORTC, PIN_ID); break;
    13ca:	a5 e3       	ldi	r26, 0x35	; 53
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <vSet_Pin_OUTPUTvalue+0xe6>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <vSet_Pin_OUTPUTvalue+0xe2>
    13ec:	84 2b       	or	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	87 c0       	rjmp	.+270    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		case PORT_D: SET_BIT(PORTD, PIN_ID); break;
    13f2:	a2 e3       	ldi	r26, 0x32	; 50
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e2 e3       	ldi	r30, 0x32	; 50
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <vSet_Pin_OUTPUTvalue+0x10e>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <vSet_Pin_OUTPUTvalue+0x10a>
    1414:	84 2b       	or	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	73 c0       	rjmp	.+230    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		}
		break;

	case LOW: // Set pin output to low
		switch(PORT_ID)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3d 83       	std	Y+5, r19	; 0x05
    1422:	2c 83       	std	Y+4, r18	; 0x04
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	59 f1       	breq	.+86     	; 0x1484 <vSet_Pin_OUTPUTvalue+0x182>
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	3d 81       	ldd	r19, Y+5	; 0x05
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	2c f4       	brge	.+10     	; 0x1442 <vSet_Pin_OUTPUTvalue+0x140>
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f0       	breq	.+26     	; 0x145a <vSet_Pin_OUTPUTvalue+0x158>
    1440:	5f c0       	rjmp	.+190    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
    1442:	2c 81       	ldd	r18, Y+4	; 0x04
    1444:	3d 81       	ldd	r19, Y+5	; 0x05
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	89 f1       	breq	.+98     	; 0x14ae <vSet_Pin_OUTPUTvalue+0x1ac>
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <vSet_Pin_OUTPUTvalue+0x156>
    1456:	40 c0       	rjmp	.+128    	; 0x14d8 <vSet_Pin_OUTPUTvalue+0x1d6>
    1458:	53 c0       	rjmp	.+166    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		{
		case PORT_A: CLEAR_BIT(PORTA, PIN_ID); break;
    145a:	ab e3       	ldi	r26, 0x3B	; 59
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vSet_Pin_OUTPUTvalue+0x176>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <vSet_Pin_OUTPUTvalue+0x172>
    147c:	80 95       	com	r24
    147e:	84 23       	and	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	3e c0       	rjmp	.+124    	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		case PORT_B: CLEAR_BIT(PORTB, PIN_ID); break;
    1484:	a8 e3       	ldi	r26, 0x38	; 56
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e8 e3       	ldi	r30, 0x38	; 56
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <vSet_Pin_OUTPUTvalue+0x1a0>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <vSet_Pin_OUTPUTvalue+0x19c>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	29 c0       	rjmp	.+82     	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		case PORT_C: CLEAR_BIT(PORTC, PIN_ID); break;
    14ae:	a5 e3       	ldi	r26, 0x35	; 53
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e3       	ldi	r30, 0x35	; 53
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vSet_Pin_OUTPUTvalue+0x1ca>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <vSet_Pin_OUTPUTvalue+0x1c6>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <vSet_Pin_OUTPUTvalue+0x1fe>
		case PORT_D: CLEAR_BIT(PORTD, PIN_ID); break;
    14d8:	a2 e3       	ldi	r26, 0x32	; 50
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e2 e3       	ldi	r30, 0x32	; 50
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vSet_Pin_OUTPUTvalue+0x1f4>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <vSet_Pin_OUTPUTvalue+0x1f0>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
		}
		break;
	}
}
    1500:	29 96       	adiw	r28, 0x09	; 9
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <vTOGGLE_Pin>:
 * @param PIN_ID  (IN) Pin number to be toggled (e.g., PIN0).
 *
 * @return void
 */
void vTOGGLE_Pin(u8 PORT_ID , u8 PIN_ID)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <vTOGGLE_Pin+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <vTOGGLE_Pin+0x8>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT_ID)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3c 83       	std	Y+4, r19	; 0x04
    152a:	2b 83       	std	Y+3, r18	; 0x03
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	49 f1       	breq	.+82     	; 0x1588 <vTOGGLE_Pin+0x76>
    1536:	2b 81       	ldd	r18, Y+3	; 0x03
    1538:	3c 81       	ldd	r19, Y+4	; 0x04
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <vTOGGLE_Pin+0x38>
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 f0       	breq	.+24     	; 0x1560 <vTOGGLE_Pin+0x4e>
    1548:	5a c0       	rjmp	.+180    	; 0x15fe <vTOGGLE_Pin+0xec>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	71 f1       	breq	.+92     	; 0x15b0 <vTOGGLE_Pin+0x9e>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	e9 f1       	breq	.+122    	; 0x15d8 <vTOGGLE_Pin+0xc6>
    155e:	4f c0       	rjmp	.+158    	; 0x15fe <vTOGGLE_Pin+0xec>
	{
	case PORT_A: TOG_BIT(PORTA, PIN_ID); break;
    1560:	ab e3       	ldi	r26, 0x3B	; 59
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vTOGGLE_Pin+0x6c>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <vTOGGLE_Pin+0x68>
    1582:	84 27       	eor	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	3b c0       	rjmp	.+118    	; 0x15fe <vTOGGLE_Pin+0xec>
	case PORT_B: TOG_BIT(PORTB, PIN_ID); break;
    1588:	a8 e3       	ldi	r26, 0x38	; 56
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e8 e3       	ldi	r30, 0x38	; 56
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <vTOGGLE_Pin+0x94>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <vTOGGLE_Pin+0x90>
    15aa:	84 27       	eor	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	27 c0       	rjmp	.+78     	; 0x15fe <vTOGGLE_Pin+0xec>
	case PORT_C: TOG_BIT(PORTC, PIN_ID); break;
    15b0:	a5 e3       	ldi	r26, 0x35	; 53
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e5 e3       	ldi	r30, 0x35	; 53
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <vTOGGLE_Pin+0xbc>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <vTOGGLE_Pin+0xb8>
    15d2:	84 27       	eor	r24, r20
    15d4:	8c 93       	st	X, r24
    15d6:	13 c0       	rjmp	.+38     	; 0x15fe <vTOGGLE_Pin+0xec>
	case PORT_D: TOG_BIT(PORTD, PIN_ID); break;
    15d8:	a2 e3       	ldi	r26, 0x32	; 50
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <vTOGGLE_Pin+0xe4>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <vTOGGLE_Pin+0xe0>
    15fa:	84 27       	eor	r24, r20
    15fc:	8c 93       	st	X, r24
	}
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <vSet_Port_Direction>:
 * @param Direction (IN) The direction for all pins (INPUT or OUTPUT).
 *
 * @return void
 */
void vSet_Port_Direction(u8 PORT_ID , u8 Direction)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	28 97       	sbiw	r28, 0x08	; 8
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	6a 83       	std	Y+2, r22	; 0x02
	switch(Direction)
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	38 87       	std	Y+8, r19	; 0x08
    162c:	2f 83       	std	Y+7, r18	; 0x07
    162e:	8f 81       	ldd	r24, Y+7	; 0x07
    1630:	98 85       	ldd	r25, Y+8	; 0x08
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	c9 f1       	breq	.+114    	; 0x16a8 <vSet_Port_Direction+0x9c>
    1636:	2f 81       	ldd	r18, Y+7	; 0x07
    1638:	38 85       	ldd	r19, Y+8	; 0x08
    163a:	21 30       	cpi	r18, 0x01	; 1
    163c:	31 05       	cpc	r19, r1
    163e:	09 f0       	breq	.+2      	; 0x1642 <vSet_Port_Direction+0x36>
    1640:	61 c0       	rjmp	.+194    	; 0x1704 <vSet_Port_Direction+0xf8>
	{
	case OUTPUT: // Set entire port as output
		switch(PORT_ID)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	3e 83       	std	Y+6, r19	; 0x06
    164a:	2d 83       	std	Y+5, r18	; 0x05
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	91 05       	cpc	r25, r1
    1654:	d1 f0       	breq	.+52     	; 0x168a <vSet_Port_Direction+0x7e>
    1656:	2d 81       	ldd	r18, Y+5	; 0x05
    1658:	3e 81       	ldd	r19, Y+6	; 0x06
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	2c f4       	brge	.+10     	; 0x166a <vSet_Port_Direction+0x5e>
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	61 f0       	breq	.+24     	; 0x1680 <vSet_Port_Direction+0x74>
    1668:	4d c0       	rjmp	.+154    	; 0x1704 <vSet_Port_Direction+0xf8>
    166a:	2d 81       	ldd	r18, Y+5	; 0x05
    166c:	3e 81       	ldd	r19, Y+6	; 0x06
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	81 f0       	breq	.+32     	; 0x1694 <vSet_Port_Direction+0x88>
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	83 30       	cpi	r24, 0x03	; 3
    167a:	91 05       	cpc	r25, r1
    167c:	81 f0       	breq	.+32     	; 0x169e <vSet_Port_Direction+0x92>
    167e:	42 c0       	rjmp	.+132    	; 0x1704 <vSet_Port_Direction+0xf8>
		{
		case PORT_A: DDRA = 0xff; break;
    1680:	ea e3       	ldi	r30, 0x3A	; 58
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	80 83       	st	Z, r24
    1688:	3d c0       	rjmp	.+122    	; 0x1704 <vSet_Port_Direction+0xf8>
		case PORT_B: DDRB = 0xff; break;
    168a:	e7 e3       	ldi	r30, 0x37	; 55
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	80 83       	st	Z, r24
    1692:	38 c0       	rjmp	.+112    	; 0x1704 <vSet_Port_Direction+0xf8>
		case PORT_C: DDRC = 0xff; break;
    1694:	e4 e3       	ldi	r30, 0x34	; 52
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	80 83       	st	Z, r24
    169c:	33 c0       	rjmp	.+102    	; 0x1704 <vSet_Port_Direction+0xf8>
		case PORT_D: DDRD = 0xff; break;
    169e:	e1 e3       	ldi	r30, 0x31	; 49
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	80 83       	st	Z, r24
    16a6:	2e c0       	rjmp	.+92     	; 0x1704 <vSet_Port_Direction+0xf8>
		}
		break;

	case INPUT: // Set entire port as input
		switch(PORT_ID)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3c 83       	std	Y+4, r19	; 0x04
    16b0:	2b 83       	std	Y+3, r18	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	c9 f0       	breq	.+50     	; 0x16ee <vSet_Port_Direction+0xe2>
    16bc:	2b 81       	ldd	r18, Y+3	; 0x03
    16be:	3c 81       	ldd	r19, Y+4	; 0x04
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <vSet_Port_Direction+0xc4>
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	61 f0       	breq	.+24     	; 0x16e6 <vSet_Port_Direction+0xda>
    16ce:	1a c0       	rjmp	.+52     	; 0x1704 <vSet_Port_Direction+0xf8>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	71 f0       	breq	.+28     	; 0x16f6 <vSet_Port_Direction+0xea>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	91 05       	cpc	r25, r1
    16e2:	69 f0       	breq	.+26     	; 0x16fe <vSet_Port_Direction+0xf2>
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <vSet_Port_Direction+0xf8>
		{
		case PORT_A: DDRA = 0x00; break;
    16e6:	ea e3       	ldi	r30, 0x3A	; 58
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	10 82       	st	Z, r1
    16ec:	0b c0       	rjmp	.+22     	; 0x1704 <vSet_Port_Direction+0xf8>
		case PORT_B: DDRB = 0x00; break;
    16ee:	e7 e3       	ldi	r30, 0x37	; 55
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <vSet_Port_Direction+0xf8>
		case PORT_C: DDRC = 0x00; break;
    16f6:	e4 e3       	ldi	r30, 0x34	; 52
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	10 82       	st	Z, r1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <vSet_Port_Direction+0xf8>
		case PORT_D: DDRD = 0x00; break;
    16fe:	e1 e3       	ldi	r30, 0x31	; 49
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	10 82       	st	Z, r1
		}
		break;
	}
}
    1704:	28 96       	adiw	r28, 0x08	; 8
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <vSet_Port_OUTPUTvalue>:
 * @param Value   (IN) The value to be set for all pins (HIGH or LOW).
 *
 * @return void
 */
void vSet_Port_OUTPUTvalue(u8 PORT_ID , u8 Value)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <vSet_Port_OUTPUTvalue+0x6>
    171c:	00 d0       	rcall	.+0      	; 0x171e <vSet_Port_OUTPUTvalue+0x8>
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT_ID)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3c 83       	std	Y+4, r19	; 0x04
    172e:	2b 83       	std	Y+3, r18	; 0x03
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	d1 f0       	breq	.+52     	; 0x176e <vSet_Port_OUTPUTvalue+0x58>
    173a:	2b 81       	ldd	r18, Y+3	; 0x03
    173c:	3c 81       	ldd	r19, Y+4	; 0x04
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	31 05       	cpc	r19, r1
    1742:	2c f4       	brge	.+10     	; 0x174e <vSet_Port_OUTPUTvalue+0x38>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	61 f0       	breq	.+24     	; 0x1764 <vSet_Port_OUTPUTvalue+0x4e>
    174c:	1e c0       	rjmp	.+60     	; 0x178a <vSet_Port_OUTPUTvalue+0x74>
    174e:	2b 81       	ldd	r18, Y+3	; 0x03
    1750:	3c 81       	ldd	r19, Y+4	; 0x04
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <vSet_Port_OUTPUTvalue+0x62>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	91 05       	cpc	r25, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <vSet_Port_OUTPUTvalue+0x6c>
    1762:	13 c0       	rjmp	.+38     	; 0x178a <vSet_Port_OUTPUTvalue+0x74>
	{
	case PORT_A: PORTA = Value; break;
    1764:	eb e3       	ldi	r30, 0x3B	; 59
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 83       	st	Z, r24
    176c:	0e c0       	rjmp	.+28     	; 0x178a <vSet_Port_OUTPUTvalue+0x74>
	case PORT_B: PORTB = Value; break;
    176e:	e8 e3       	ldi	r30, 0x38	; 56
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vSet_Port_OUTPUTvalue+0x74>
	case PORT_C: PORTC = Value; break;
    1778:	e5 e3       	ldi	r30, 0x35	; 53
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	04 c0       	rjmp	.+8      	; 0x178a <vSet_Port_OUTPUTvalue+0x74>
	case PORT_D: PORTD = Value; break;
    1782:	e2 e3       	ldi	r30, 0x32	; 50
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
	}
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <vGIT_PIN>:
 * @param PIN_ID  (IN) Pin number to read (e.g., PIN0).
 *
 * @return u8 (OUT) The current input value of the pin (HIGH or LOW).
 */
u8 vGIT_PIN(u8 PORT_ID , u8 PIN_ID)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	00 d0       	rcall	.+0      	; 0x179e <vGIT_PIN+0x6>
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <vGIT_PIN+0x8>
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	8a 83       	std	Y+2, r24	; 0x02
    17a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 BIT = 0;
    17aa:	19 82       	std	Y+1, r1	; 0x01
	switch(PORT_ID)
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3d 83       	std	Y+5, r19	; 0x05
    17b4:	2c 83       	std	Y+4, r18	; 0x04
    17b6:	4c 81       	ldd	r20, Y+4	; 0x04
    17b8:	5d 81       	ldd	r21, Y+5	; 0x05
    17ba:	41 30       	cpi	r20, 0x01	; 1
    17bc:	51 05       	cpc	r21, r1
    17be:	41 f1       	breq	.+80     	; 0x1810 <vGIT_PIN+0x78>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	91 05       	cpc	r25, r1
    17c8:	34 f4       	brge	.+12     	; 0x17d6 <vGIT_PIN+0x3e>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	61 f0       	breq	.+24     	; 0x17ec <vGIT_PIN+0x54>
    17d4:	52 c0       	rjmp	.+164    	; 0x187a <vGIT_PIN+0xe2>
    17d6:	4c 81       	ldd	r20, Y+4	; 0x04
    17d8:	5d 81       	ldd	r21, Y+5	; 0x05
    17da:	42 30       	cpi	r20, 0x02	; 2
    17dc:	51 05       	cpc	r21, r1
    17de:	51 f1       	breq	.+84     	; 0x1834 <vGIT_PIN+0x9c>
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	9d 81       	ldd	r25, Y+5	; 0x05
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	91 05       	cpc	r25, r1
    17e8:	b9 f1       	breq	.+110    	; 0x1858 <vGIT_PIN+0xc0>
    17ea:	47 c0       	rjmp	.+142    	; 0x187a <vGIT_PIN+0xe2>
	{
	case PORT_A: BIT = GET_BIT(PINA, PIN_ID); break;
    17ec:	e9 e3       	ldi	r30, 0x39	; 57
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a9 01       	movw	r20, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <vGIT_PIN+0x6c>
    1800:	55 95       	asr	r21
    1802:	47 95       	ror	r20
    1804:	8a 95       	dec	r24
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <vGIT_PIN+0x68>
    1808:	ca 01       	movw	r24, r20
    180a:	81 70       	andi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	35 c0       	rjmp	.+106    	; 0x187a <vGIT_PIN+0xe2>
	case PORT_B: BIT = GET_BIT(PINB, PIN_ID); break;
    1810:	e6 e3       	ldi	r30, 0x36	; 54
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a9 01       	movw	r20, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vGIT_PIN+0x90>
    1824:	55 95       	asr	r21
    1826:	47 95       	ror	r20
    1828:	8a 95       	dec	r24
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <vGIT_PIN+0x8c>
    182c:	ca 01       	movw	r24, r20
    182e:	81 70       	andi	r24, 0x01	; 1
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	23 c0       	rjmp	.+70     	; 0x187a <vGIT_PIN+0xe2>
	case PORT_C: BIT = GET_BIT(PINC, PIN_ID); break;
    1834:	e3 e3       	ldi	r30, 0x33	; 51
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vGIT_PIN+0xb4>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <vGIT_PIN+0xb0>
    1850:	ca 01       	movw	r24, r20
    1852:	81 70       	andi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	11 c0       	rjmp	.+34     	; 0x187a <vGIT_PIN+0xe2>
	case PORT_D: BIT = GET_BIT(PIND, PIN_ID); break;
    1858:	e0 e3       	ldi	r30, 0x30	; 48
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a9 01       	movw	r20, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <vGIT_PIN+0xd8>
    186c:	55 95       	asr	r21
    186e:	47 95       	ror	r20
    1870:	8a 95       	dec	r24
    1872:	e2 f7       	brpl	.-8      	; 0x186c <vGIT_PIN+0xd4>
    1874:	ca 01       	movw	r24, r20
    1876:	81 70       	andi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
	}
	return BIT; // Return the status of the specific pin
    187a:	89 81       	ldd	r24, Y+1	; 0x01
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <vSetInernalPullUp>:
 * @param PIN_ID  (IN) Pin number to enable pull-up (e.g., PIN0).
 *
 * @return void
 */
void vSetInernalPullUp(u8 PORT_ID , u8 PIN_ID )
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <vSetInernalPullUp+0x6>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	6a 83       	std	Y+2, r22	; 0x02
	vSet_Pin_OUTPUTvalue(PORT_ID, PIN_ID, HIGH);
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	6a 81       	ldd	r22, Y+2	; 0x02
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <Solenoid_Init>:
 *
 * @param None
 * @return void
 */
void Solenoid_Init(void)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    vSet_Pin_Direction(SOLO_PORT, SOLO_PIN, OUTPUT); // Set solenoid pin as OUTPUT
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <Solenoid_Activate>:
 *
 * @param None
 * @return void
 */
void Solenoid_Activate(void)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    vSet_Pin_OUTPUTvalue(SOLO_PORT, SOLO_PIN, HIGH); // Set solenoid pin HIGH
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <Solenoid_Deactivate>:
 *
 * @param None
 * @return void
 */
void Solenoid_Deactivate(void)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    vSet_Pin_OUTPUTvalue(SOLO_PORT, SOLO_PIN, LOW); // Set solenoid pin LOW
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <LED_vInit>:
 *
 * @param portname [in] The port where the LED is connected (e.g., PORT_A).
 * @param pinnumber [in] The pin number to which the LED is connected.
 * @return None (void).
 */
void LED_vInit(u8 portname, u8 pinnumber) {
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <LED_vInit+0x6>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	6a 83       	std	Y+2, r22	; 0x02
    vSet_Pin_Direction(portname, pinnumber, OUTPUT);  // Set the LED pin as output
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	6a 81       	ldd	r22, Y+2	; 0x02
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <LED_vTurnOn>:
 *
 * @param portname [in] The port where the LED is connected.
 * @param pinnumber [in] The pin number to which the LED is connected.
 * @return None (void).
 */
void LED_vTurnOn(u8 portname, u8 pinnumber) {
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <LED_vTurnOn+0x6>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	6a 83       	std	Y+2, r22	; 0x02
    vSet_Pin_OUTPUTvalue(portname, pinnumber, HIGH);  // Set the pin to high
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	6a 81       	ldd	r22, Y+2	; 0x02
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <LED_vTurnOff>:
 *
 * @param portname [in] The port where the LED is connected.
 * @param pinnumber [in] The pin number to which the LED is connected.
 * @return None (void).
 */
void LED_vTurnOff(u8 portname, u8 pinnumber) {
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <LED_vTurnOff+0x6>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	6a 83       	std	Y+2, r22	; 0x02
    vSet_Pin_OUTPUTvalue(portname, pinnumber, LOW);  // Set the pin to low
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	6a 81       	ldd	r22, Y+2	; 0x02
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <LED_vToggle>:
 *
 * @param portname [in] The port where the LED is connected.
 * @param pinnumber [in] The pin number to which the LED is connected.
 * @return None (void).
 */
void LED_vToggle(u8 portname, u8 pinnumber) {
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <LED_vToggle+0x6>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	6a 83       	std	Y+2, r22	; 0x02
    vTOGGLE_Pin(portname, pinnumber);  // Toggle the LED state
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	6a 81       	ldd	r22, Y+2	; 0x02
    196e:	0e 94 89 0a 	call	0x1512	; 0x1512 <vTOGGLE_Pin>
}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <LED_u8ReadStatus>:
 *
 * @param portname [in] The port where the LED is connected.
 * @param pinnumber [in] The pin number to which the LED is connected.
 * @return u8 [out] The current state of the LED (1 for on, 0 for off).
 */
u8 LED_u8ReadStatus(u8 portname, u8 pinnumber) {
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <LED_u8ReadStatus+0x6>
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	6a 83       	std	Y+2, r22	; 0x02
    return vGIT_PIN(portname, pinnumber);  // Return the LED status
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	6a 81       	ldd	r22, Y+2	; 0x02
    198e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <vGIT_PIN>
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <BUZZER_vInit>:
 * (IN)  No input parameters.
 * (OUT) No output parameters.
 *
 * @return void
 */
void BUZZER_vInit(void) {
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    vSet_Pin_Direction(BUZZER_PORT, BUZZER_PIN, OUTPUT);  // Set buzzer pin as output
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	67 e0       	ldi	r22, 0x07	; 7
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>
}
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <BUZZER_vTurnOn>:
 * (IN)  No input parameters.
 * (OUT) No output parameters.
 *
 * @return void
 */
void BUZZER_vTurnOn(void) {
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    vSet_Pin_OUTPUTvalue(BUZZER_PORT, BUZZER_PIN, HIGH);  // Set buzzer pin to high
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	67 e0       	ldi	r22, 0x07	; 7
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <BUZZER_vTurnOff>:
 * (IN)  No input parameters.
 * (OUT) No output parameters.
 *
 * @return void
 */
void BUZZER_vTurnOff(void) {
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    vSet_Pin_OUTPUTvalue(BUZZER_PORT, BUZZER_PIN, LOW);   // Set buzzer pin to low
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	67 e0       	ldi	r22, 0x07	; 7
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
}
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <BUZZER_vSirenAlarm>:
 * (IN)  No input parameters.
 * (OUT) No output parameters.
 *
 * @return void
 */
void BUZZER_vSirenAlarm(void) {
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	6e 97       	sbiw	r28, 0x1e	; 30
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i < 10; i++) { // Blink buzzer 10 times
    19f8:	1e 8e       	std	Y+30, r1	; 0x1e
    19fa:	1d 8e       	std	Y+29, r1	; 0x1d
    19fc:	f3 c0       	rjmp	.+486    	; 0x1be4 <BUZZER_vSirenAlarm+0x200>
        vSet_Pin_OUTPUTvalue(BUZZER_PORT, BUZZER_PIN, HIGH);  // Turn on buzzer
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	67 e0       	ldi	r22, 0x07	; 7
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	aa ef       	ldi	r26, 0xFA	; 250
    1a0e:	b3 e4       	ldi	r27, 0x43	; 67
    1a10:	89 8f       	std	Y+25, r24	; 0x19
    1a12:	9a 8f       	std	Y+26, r25	; 0x1a
    1a14:	ab 8f       	std	Y+27, r26	; 0x1b
    1a16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8d 8b       	std	Y+21, r24	; 0x15
    1a32:	9e 8b       	std	Y+22, r25	; 0x16
    1a34:	af 8b       	std	Y+23, r26	; 0x17
    1a36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a38:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <BUZZER_vSirenAlarm+0x76>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 8b       	std	Y+20, r25	; 0x14
    1a56:	8b 8b       	std	Y+19, r24	; 0x13
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <BUZZER_vSirenAlarm+0xf4>
	else if (__tmp > 65535)
    1a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a60:	98 8d       	ldd	r25, Y+24	; 0x18
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <BUZZER_vSirenAlarm+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	69 8d       	ldd	r22, Y+25	; 0x19
    1a74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9c 8b       	std	Y+20, r25	; 0x14
    1a98:	8b 8b       	std	Y+19, r24	; 0x13
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <BUZZER_vSirenAlarm+0xd6>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9a 8b       	std	Y+18, r25	; 0x12
    1aa2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa4:	89 89       	ldd	r24, Y+17	; 0x11
    1aa6:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <BUZZER_vSirenAlarm+0xc4>
    1aac:	9a 8b       	std	Y+18, r25	; 0x12
    1aae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9c 8b       	std	Y+20, r25	; 0x14
    1ab8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8b 89       	ldd	r24, Y+19	; 0x13
    1abc:	9c 89       	ldd	r25, Y+20	; 0x14
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <BUZZER_vSirenAlarm+0xb8>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <BUZZER_vSirenAlarm+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9c 8b       	std	Y+20, r25	; 0x14
    1ad6:	8b 8b       	std	Y+19, r24	; 0x13
    1ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ada:	9c 89       	ldd	r25, Y+20	; 0x14
    1adc:	98 8b       	std	Y+16, r25	; 0x10
    1ade:	8f 87       	std	Y+15, r24	; 0x0f
    1ae0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae2:	98 89       	ldd	r25, Y+16	; 0x10
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <BUZZER_vSirenAlarm+0x100>
    1ae8:	98 8b       	std	Y+16, r25	; 0x10
    1aea:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);  // Delay for 500 milliseconds (requires <util/delay.h> or similar delay function)
        vSet_Pin_OUTPUTvalue(BUZZER_PORT, BUZZER_PIN, LOW);   // Turn off buzzer
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	67 e0       	ldi	r22, 0x07	; 7
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	aa ef       	ldi	r26, 0xFA	; 250
    1afc:	b3 e4       	ldi	r27, 0x43	; 67
    1afe:	8b 87       	std	Y+11, r24	; 0x0b
    1b00:	9c 87       	std	Y+12, r25	; 0x0c
    1b02:	ad 87       	std	Y+13, r26	; 0x0d
    1b04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a ef       	ldi	r20, 0xFA	; 250
    1b14:	54 e4       	ldi	r21, 0x44	; 68
    1b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8f 83       	std	Y+7, r24	; 0x07
    1b20:	98 87       	std	Y+8, r25	; 0x08
    1b22:	a9 87       	std	Y+9, r26	; 0x09
    1b24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b26:	6f 81       	ldd	r22, Y+7	; 0x07
    1b28:	78 85       	ldd	r23, Y+8	; 0x08
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <BUZZER_vSirenAlarm+0x164>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <BUZZER_vSirenAlarm+0x1e2>
	else if (__tmp > 65535)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <BUZZER_vSirenAlarm+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <BUZZER_vSirenAlarm+0x1c4>
    1b8a:	88 ec       	ldi	r24, 0xC8	; 200
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	8b 83       	std	Y+3, r24	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <BUZZER_vSirenAlarm+0x1b2>
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <BUZZER_vSirenAlarm+0x1a6>
    1bb0:	14 c0       	rjmp	.+40     	; 0x1bda <BUZZER_vSirenAlarm+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <BUZZER_vSirenAlarm+0x1ee>
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
 * (OUT) No output parameters.
 *
 * @return void
 */
void BUZZER_vSirenAlarm(void) {
    for (int i = 0; i < 10; i++) { // Blink buzzer 10 times
    1bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	9e 8f       	std	Y+30, r25	; 0x1e
    1be2:	8d 8f       	std	Y+29, r24	; 0x1d
    1be4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be8:	8a 30       	cpi	r24, 0x0A	; 10
    1bea:	91 05       	cpc	r25, r1
    1bec:	0c f4       	brge	.+2      	; 0x1bf0 <BUZZER_vSirenAlarm+0x20c>
    1bee:	07 cf       	rjmp	.-498    	; 0x19fe <BUZZER_vSirenAlarm+0x1a>
        vSet_Pin_OUTPUTvalue(BUZZER_PORT, BUZZER_PIN, HIGH);  // Turn on buzzer
        _delay_ms(500);  // Delay for 500 milliseconds (requires <util/delay.h> or similar delay function)
        vSet_Pin_OUTPUTvalue(BUZZER_PORT, BUZZER_PIN, LOW);   // Turn off buzzer
        _delay_ms(500);  // Delay for 500 milliseconds
    }
}
    1bf0:	6e 96       	adiw	r28, 0x1e	; 30
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <SMART_INIT>:
 *
 * @param None
 * @return void
 */
void SMART_INIT(void)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    UART_Init(); // Initialize UART for communication
    1c0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <UART_Init>

    // Configure pin directions for hardware components
    vSet_Pin_Direction(PORT_D, PIN_0, INPUT); // Set PORT_D, PIN_0 as INPUT for UART RX
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>
    vSet_Pin_Direction(PORT_D, PIN_1, OUTPUT); // Set PORT_D, PIN_1 as OUTPUT for UART TX
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	61 e0       	ldi	r22, 0x01	; 1
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>

    // Configure LED pin
    vSet_Pin_Direction(PORT_A, LED_PIN, OUTPUT); // Set PORT_A, LED_PIN as OUTPUT
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>

    // Configure Buzzer pin
    vSet_Pin_Direction(PORT_C, BUZZER_PIN, OUTPUT); // Set PORT_C, BUZZER_PIN as OUTPUT
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	61 e0       	ldi	r22, 0x01	; 1
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>

    // Configure Door pin (Solenoid lock)
    vSet_Pin_Direction(PORT_D, DOOR_PIN, OUTPUT); // Set PORT_D, DOOR_PIN as OUTPUT
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	65 e0       	ldi	r22, 0x05	; 5
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vSet_Pin_Direction>
}
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <AUTHENICATION>:
 * @return int (OUT) - Status code representing the result of the authentication:
 *                      0: Authentication failed
 *                      1: Authentication succeeded
 */
int AUTHENICATION(void)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	eb 97       	sbiw	r28, 0x3b	; 59
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    char rUSERNAME[20]; // Buffer to store received username
    char rPASSWORD[20]; // Buffer to store received password
    char i = 0;
    1c5a:	19 8a       	std	Y+17, r1	; 0x11
    char authSuccess = 0; // Flag to check if authentication is successful
    1c5c:	18 8a       	std	Y+16, r1	; 0x10

    // Allow up to MAX_TRIALS attempts for authentication
    for (i = 0; i < MAX_TRIALS; i++)
    1c5e:	19 8a       	std	Y+17, r1	; 0x11
    1c60:	64 c0       	rjmp	.+200    	; 0x1d2a <AUTHENICATION+0xe4>
    {
        UART_TransmitString("ENTER USERNAME:"); // Prompt user for username
    1c62:	80 e6       	ldi	r24, 0x60	; 96
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
        UART_ReceiveString((char*)rUSERNAME, MAX_LENGTH); // Receive username
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	42 96       	adiw	r24, 0x12	; 18
    1c6e:	64 e1       	ldi	r22, 0x14	; 20
    1c70:	0e 94 2f 07 	call	0xe5e	; 0xe5e <UART_ReceiveString>

        UART_TransmitString("ENTER PASSWORD:"); // Prompt user for password
    1c74:	80 e7       	ldi	r24, 0x70	; 112
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
        UART_ReceiveString((char*)rPASSWORD, MAX_LENGTH); // Receive password
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	86 96       	adiw	r24, 0x26	; 38
    1c80:	64 e1       	ldi	r22, 0x14	; 20
    1c82:	0e 94 2f 07 	call	0xe5e	; 0xe5e <UART_ReceiveString>

        // Check if received username and password match any stored credentials
        for (u8 j = 0; j < MAX_USERS; j++)
    1c86:	1f 86       	std	Y+15, r1	; 0x0f
    1c88:	3e c0       	rjmp	.+124    	; 0x1d06 <AUTHENICATION+0xc0>
        {
            if ((strcmp((char*)rUSERNAME, usernames[j]) == 0) &&
    1c8a:	4a e1       	ldi	r20, 0x1A	; 26
    1c8c:	52 e0       	ldi	r21, 0x02	; 2
    1c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	c9 01       	movw	r24, r18
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	9a 01       	movw	r18, r20
    1ca4:	28 0f       	add	r18, r24
    1ca6:	39 1f       	adc	r19, r25
    1ca8:	ce 01       	movw	r24, r28
    1caa:	42 96       	adiw	r24, 0x12	; 18
    1cac:	b9 01       	movw	r22, r18
    1cae:	0e 94 d6 10 	call	0x21ac	; 0x21ac <strcmp>
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	29 f5       	brne	.+74     	; 0x1d00 <AUTHENICATION+0xba>
    1cb6:	46 e5       	ldi	r20, 0x56	; 86
    1cb8:	52 e0       	ldi	r21, 0x02	; 2
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	c9 01       	movw	r24, r18
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	82 0f       	add	r24, r18
    1cc8:	93 1f       	adc	r25, r19
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	9a 01       	movw	r18, r20
    1cd0:	28 0f       	add	r18, r24
    1cd2:	39 1f       	adc	r19, r25
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	86 96       	adiw	r24, 0x26	; 38
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 d6 10 	call	0x21ac	; 0x21ac <strcmp>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	79 f4       	brne	.+30     	; 0x1d00 <AUTHENICATION+0xba>
                (strcmp((char*)rPASSWORD, pass[j]) == 0))
            {
                UART_TransmitString("AUTHENTICATION SUCCEEDED\n"); // Notify success
    1ce2:	80 e8       	ldi	r24, 0x80	; 128
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                UART_TransmitString("     ");
    1cea:	8a e9       	ldi	r24, 0x9A	; 154
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                authSuccess = 1; // Set flag to indicate success
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	88 8b       	std	Y+16, r24	; 0x10
                return 1; // Return success
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9b af       	std	Y+59, r25	; 0x3b
    1cfc:	8a af       	std	Y+58, r24	; 0x3a
    1cfe:	9f c0       	rjmp	.+318    	; 0x1e3e <AUTHENICATION+0x1f8>

        UART_TransmitString("ENTER PASSWORD:"); // Prompt user for password
        UART_ReceiveString((char*)rPASSWORD, MAX_LENGTH); // Receive password

        // Check if received username and password match any stored credentials
        for (u8 j = 0; j < MAX_USERS; j++)
    1d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d02:	8f 5f       	subi	r24, 0xFF	; 255
    1d04:	8f 87       	std	Y+15, r24	; 0x0f
    1d06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d08:	8a 30       	cpi	r24, 0x0A	; 10
    1d0a:	08 f4       	brcc	.+2      	; 0x1d0e <AUTHENICATION+0xc8>
    1d0c:	be cf       	rjmp	.-132    	; 0x1c8a <AUTHENICATION+0x44>
                authSuccess = 1; // Set flag to indicate success
                return 1; // Return success
            }
        }

        UART_TransmitString("AUTHENTICATION FAILED\n"); // Notify failure
    1d0e:	80 ea       	ldi	r24, 0xA0	; 160
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
        UART_TransmitString("     ");
    1d16:	8a e9       	ldi	r24, 0x9A	; 154
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>

        if (authSuccess) // Break if authentication succeeded
    1d1e:	88 89       	ldd	r24, Y+16	; 0x10
    1d20:	88 23       	and	r24, r24
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <AUTHENICATION+0xec>
    char rPASSWORD[20]; // Buffer to store received password
    char i = 0;
    char authSuccess = 0; // Flag to check if authentication is successful

    // Allow up to MAX_TRIALS attempts for authentication
    for (i = 0; i < MAX_TRIALS; i++)
    1d24:	89 89       	ldd	r24, Y+17	; 0x11
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	89 8b       	std	Y+17, r24	; 0x11
    1d2a:	89 89       	ldd	r24, Y+17	; 0x11
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	08 f4       	brcc	.+2      	; 0x1d32 <AUTHENICATION+0xec>
    1d30:	98 cf       	rjmp	.-208    	; 0x1c62 <AUTHENICATION+0x1c>
            break;
        }
    }

    // If authentication fails after MAX_TRIALS attempts, activate the buzzer
    if (i >= MAX_TRIALS && !authSuccess)
    1d32:	89 89       	ldd	r24, Y+17	; 0x11
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	08 f4       	brcc	.+2      	; 0x1d3a <AUTHENICATION+0xf4>
    1d38:	80 c0       	rjmp	.+256    	; 0x1e3a <AUTHENICATION+0x1f4>
    1d3a:	88 89       	ldd	r24, Y+16	; 0x10
    1d3c:	88 23       	and	r24, r24
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <AUTHENICATION+0xfc>
    1d40:	7c c0       	rjmp	.+248    	; 0x1e3a <AUTHENICATION+0x1f4>
    {
        vSet_Pin_OUTPUTvalue(PORT_C, BUZZER_PIN, HIGH); // Activate buzzer
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	aa e7       	ldi	r26, 0x7A	; 122
    1d52:	b4 e4       	ldi	r27, 0x44	; 68
    1d54:	8b 87       	std	Y+11, r24	; 0x0b
    1d56:	9c 87       	std	Y+12, r25	; 0x0c
    1d58:	ad 87       	std	Y+13, r26	; 0x0d
    1d5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a ef       	ldi	r20, 0xFA	; 250
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	8f 83       	std	Y+7, r24	; 0x07
    1d76:	98 87       	std	Y+8, r25	; 0x08
    1d78:	a9 87       	std	Y+9, r26	; 0x09
    1d7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7e:	78 85       	ldd	r23, Y+8	; 0x08
    1d80:	89 85       	ldd	r24, Y+9	; 0x09
    1d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e8       	ldi	r20, 0x80	; 128
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d90:	88 23       	and	r24, r24
    1d92:	2c f4       	brge	.+10     	; 0x1d9e <AUTHENICATION+0x158>
		__ticks = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9e 83       	std	Y+6, r25	; 0x06
    1d9a:	8d 83       	std	Y+5, r24	; 0x05
    1d9c:	3f c0       	rjmp	.+126    	; 0x1e1c <AUTHENICATION+0x1d6>
	else if (__tmp > 65535)
    1d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1da0:	78 85       	ldd	r23, Y+8	; 0x08
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	3f ef       	ldi	r19, 0xFF	; 255
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	57 e4       	ldi	r21, 0x47	; 71
    1dae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	4c f5       	brge	.+82     	; 0x1e08 <AUTHENICATION+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e2       	ldi	r20, 0x20	; 32
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <AUTHENICATION+0x1b8>
    1de0:	88 ec       	ldi	r24, 0xC8	; 200
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <AUTHENICATION+0x1a6>
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	69 f7       	brne	.-38     	; 0x1de0 <AUTHENICATION+0x19a>
    1e06:	14 c0       	rjmp	.+40     	; 0x1e30 <AUTHENICATION+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <AUTHENICATION+0x1e2>
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1000); // Wait for 1 second
        vSet_Pin_OUTPUTvalue(PORT_C, BUZZER_PIN, LOW); // Deactivate buzzer
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
    }

    return 0; // Return failure
    1e3a:	1b ae       	std	Y+59, r1	; 0x3b
    1e3c:	1a ae       	std	Y+58, r1	; 0x3a
    1e3e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e40:	9b ad       	ldd	r25, Y+59	; 0x3b
}
    1e42:	eb 96       	adiw	r28, 0x3b	; 59
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <LED_CONTROL>:
 *                     '1': Turn LED ON
 *                     '2': Turn LED OFF
 * @return void
 */
void LED_CONTROL(u8 order)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    if (order == '1') // If order is '1', turn LED ON
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	81 33       	cpi	r24, 0x31	; 49
    1e64:	51 f4       	brne	.+20     	; 0x1e7a <LED_CONTROL+0x26>
    {
        vSet_Pin_OUTPUTvalue(PORT_A, LED_PIN, HIGH); // Set LED pin HIGH
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
        UART_TransmitString("LED IS ON"); // Notify LED status
    1e70:	87 eb       	ldi	r24, 0xB7	; 183
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1e78:	0c c0       	rjmp	.+24     	; 0x1e92 <LED_CONTROL+0x3e>
    }
    else if (order == '2') // If order is '2', turn LED OFF
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	82 33       	cpi	r24, 0x32	; 50
    1e7e:	49 f4       	brne	.+18     	; 0x1e92 <LED_CONTROL+0x3e>
    {
        vSet_Pin_OUTPUTvalue(PORT_A, LED_PIN, LOW); // Set LED pin LOW
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
        UART_TransmitString("LED IS OFF"); // Notify LED status
    1e8a:	81 ec       	ldi	r24, 0xC1	; 193
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    }
}
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <DOOR_CONTROL>:
 *                     '1': Lock the door
 *                     '2': Unlock the door
 * @return void
 */
void DOOR_CONTROL(u8 order)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    if (order == '1') // If order is '1', lock the door
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	81 33       	cpi	r24, 0x31	; 49
    1eaa:	51 f4       	brne	.+20     	; 0x1ec0 <DOOR_CONTROL+0x26>
    {
        vSet_Pin_OUTPUTvalue(PORT_D, DOOR_PIN, HIGH); // Set door pin HIGH
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	65 e0       	ldi	r22, 0x05	; 5
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
        UART_TransmitString("LOCKED"); // Notify door status
    1eb6:	8c ec       	ldi	r24, 0xCC	; 204
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1ebe:	0c c0       	rjmp	.+24     	; 0x1ed8 <DOOR_CONTROL+0x3e>
    }
    else if (order == '2') // If order is '2', unlock the door
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	82 33       	cpi	r24, 0x32	; 50
    1ec4:	49 f4       	brne	.+18     	; 0x1ed8 <DOOR_CONTROL+0x3e>
    {
        vSet_Pin_OUTPUTvalue(PORT_D, DOOR_PIN, LOW); // Set door pin LOW
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	65 e0       	ldi	r22, 0x05	; 5
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
        UART_TransmitString("UNLOCKED"); // Notify door status
    1ed0:	83 ed       	ldi	r24, 0xD3	; 211
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    }
}
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <main>:
#include "MCAL/DIO/DIO_Interface.h" // Ensure this path is correct
#include <util/delay.h> // Include delay functions from AVR library
#include <stdint.h> // Include for uint8_t type

int main(void)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	61 97       	sbiw	r28, 0x11	; 17
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    // Initialize the smart home system
    SMART_INIT();
    1ef4:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <SMART_INIT>

    // Variable to store received command
    uint8_t command = 0; // Use uint8_t for standard integer type
    1ef8:	1f 86       	std	Y+15, r1	; 0x0f

    // Main loop
    while (1)
    {
        // Prompt user for input
        UART_TransmitString("Select an option:\n");
    1efa:	8c ed       	ldi	r24, 0xDC	; 220
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
        UART_TransmitString("A. LED\n");
    1f02:	8f ee       	ldi	r24, 0xEF	; 239
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
        UART_TransmitString("B. Buzzer\n");
    1f0a:	87 ef       	ldi	r24, 0xF7	; 247
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
        UART_TransmitString("C. Solenoid Door\n");
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>

        // Wait for user input
        command = UART_ReceiveByte();
    1f1a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_ReceiveByte>
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f

        switch (command)
    1f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	39 8b       	std	Y+17, r19	; 0x11
    1f28:	28 8b       	std	Y+16, r18	; 0x10
    1f2a:	88 89       	ldd	r24, Y+16	; 0x10
    1f2c:	99 89       	ldd	r25, Y+17	; 0x11
    1f2e:	82 34       	cpi	r24, 0x42	; 66
    1f30:	91 05       	cpc	r25, r1
    1f32:	b1 f1       	breq	.+108    	; 0x1fa0 <main+0xc0>
    1f34:	28 89       	ldd	r18, Y+16	; 0x10
    1f36:	39 89       	ldd	r19, Y+17	; 0x11
    1f38:	23 34       	cpi	r18, 0x43	; 67
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <main+0x60>
    1f3e:	5e c0       	rjmp	.+188    	; 0x1ffc <main+0x11c>
    1f40:	88 89       	ldd	r24, Y+16	; 0x10
    1f42:	99 89       	ldd	r25, Y+17	; 0x11
    1f44:	81 34       	cpi	r24, 0x41	; 65
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <main+0x6c>
    1f4a:	82 c0       	rjmp	.+260    	; 0x2050 <main+0x170>
        {
            case 'A':
                UART_TransmitString("LED Control:\n");
    1f4c:	84 e1       	ldi	r24, 0x14	; 20
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                UART_TransmitString("1. ON\n");
    1f54:	82 e2       	ldi	r24, 0x22	; 34
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                UART_TransmitString("2. OFF\n");
    1f5c:	89 e2       	ldi	r24, 0x29	; 41
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>

                // Wait for user input
                command = UART_ReceiveByte();
    1f64:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_ReceiveByte>
    1f68:	8f 87       	std	Y+15, r24	; 0x0f
                if (command == '1')
    1f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6c:	81 33       	cpi	r24, 0x31	; 49
    1f6e:	41 f4       	brne	.+16     	; 0x1f80 <main+0xa0>
                {
                    LED_CONTROL('1'); // Turn LED ON
    1f70:	81 e3       	ldi	r24, 0x31	; 49
    1f72:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LED_CONTROL>
                    UART_TransmitString("LED is ON\n");
    1f76:	81 e3       	ldi	r24, 0x31	; 49
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1f7e:	6c c0       	rjmp	.+216    	; 0x2058 <main+0x178>
                }
                else if (command == '2')
    1f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f82:	82 33       	cpi	r24, 0x32	; 50
    1f84:	41 f4       	brne	.+16     	; 0x1f96 <main+0xb6>
                {
                    LED_CONTROL('2'); // Turn LED OFF
    1f86:	82 e3       	ldi	r24, 0x32	; 50
    1f88:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LED_CONTROL>
                    UART_TransmitString("LED is OFF\n");
    1f8c:	8c e3       	ldi	r24, 0x3C	; 60
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1f94:	61 c0       	rjmp	.+194    	; 0x2058 <main+0x178>
                }
                else
                {
                    UART_TransmitString("Invalid LED command\n");
    1f96:	88 e4       	ldi	r24, 0x48	; 72
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1f9e:	5c c0       	rjmp	.+184    	; 0x2058 <main+0x178>
                }
                break;

            case 'B':
                UART_TransmitString("Buzzer Control:\n");
    1fa0:	8d e5       	ldi	r24, 0x5D	; 93
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                UART_TransmitString("1. ON\n");
    1fa8:	82 e2       	ldi	r24, 0x22	; 34
    1faa:	91 e0       	ldi	r25, 0x01	; 1
    1fac:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                UART_TransmitString("2. OFF\n");
    1fb0:	89 e2       	ldi	r24, 0x29	; 41
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>

                // Wait for user input
                command = UART_ReceiveByte();
    1fb8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_ReceiveByte>
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
                if (command == '1')
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	81 33       	cpi	r24, 0x31	; 49
    1fc2:	51 f4       	brne	.+20     	; 0x1fd8 <main+0xf8>
                {
                    vSet_Pin_OUTPUTvalue(PORT_C, BUZZER_PIN, HIGH); // Turn Buzzer ON
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
                    UART_TransmitString("Buzzer is ON\n");
    1fce:	8e e6       	ldi	r24, 0x6E	; 110
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1fd6:	40 c0       	rjmp	.+128    	; 0x2058 <main+0x178>
                }
                else if (command == '2')
    1fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fda:	82 33       	cpi	r24, 0x32	; 50
    1fdc:	51 f4       	brne	.+20     	; 0x1ff2 <main+0x112>
                {
                    vSet_Pin_OUTPUTvalue(PORT_C, BUZZER_PIN, LOW); // Turn Buzzer OFF
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 81 09 	call	0x1302	; 0x1302 <vSet_Pin_OUTPUTvalue>
                    UART_TransmitString("Buzzer is OFF\n");
    1fe8:	8c e7       	ldi	r24, 0x7C	; 124
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1ff0:	33 c0       	rjmp	.+102    	; 0x2058 <main+0x178>
                }
                else
                {
                    UART_TransmitString("Invalid Buzzer command\n");
    1ff2:	8b e8       	ldi	r24, 0x8B	; 139
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    1ffa:	2e c0       	rjmp	.+92     	; 0x2058 <main+0x178>
                }
                break;

            case 'C':
                UART_TransmitString("Solenoid Door Control:\n");
    1ffc:	83 ea       	ldi	r24, 0xA3	; 163
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                UART_TransmitString("1. OPEN\n");
    2004:	8b eb       	ldi	r24, 0xBB	; 187
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
                UART_TransmitString("2. CLOSE\n");
    200c:	84 ec       	ldi	r24, 0xC4	; 196
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>

                // Wait for user input
                command = UART_ReceiveByte();
    2014:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_ReceiveByte>
    2018:	8f 87       	std	Y+15, r24	; 0x0f
                if (command == '1')
    201a:	8f 85       	ldd	r24, Y+15	; 0x0f
    201c:	81 33       	cpi	r24, 0x31	; 49
    201e:	41 f4       	brne	.+16     	; 0x2030 <main+0x150>
                {
                    DOOR_CONTROL(OPEN); // Open the door
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <DOOR_CONTROL>
                    UART_TransmitString("Door is OPEN\n");
    2026:	8e ec       	ldi	r24, 0xCE	; 206
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <main+0x178>
                }
                else if (command == '2')
    2030:	8f 85       	ldd	r24, Y+15	; 0x0f
    2032:	82 33       	cpi	r24, 0x32	; 50
    2034:	41 f4       	brne	.+16     	; 0x2046 <main+0x166>
                {
                    DOOR_CONTROL(CLOSE); // Close the door
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <DOOR_CONTROL>
                    UART_TransmitString("Door is CLOSED\n");
    203c:	8c ed       	ldi	r24, 0xDC	; 220
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    2044:	09 c0       	rjmp	.+18     	; 0x2058 <main+0x178>
                }
                else
                {
                    UART_TransmitString("Invalid Door command\n");
    2046:	8c ee       	ldi	r24, 0xEC	; 236
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <main+0x178>
                }
                break;

            default:
                UART_TransmitString("Invalid option\n");
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	92 e0       	ldi	r25, 0x02	; 2
    2054:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_TransmitString>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a8 ec       	ldi	r26, 0xC8	; 200
    205e:	b2 e4       	ldi	r27, 0x42	; 66
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <main+0x1ca>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <main+0x248>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <main+0x22a>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <main+0x218>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <main+0x20c>
    2112:	f3 ce       	rjmp	.-538    	; 0x1efa <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <main+0x254>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	de ce       	rjmp	.-580    	; 0x1efa <main+0x1a>

0000213e <__prologue_saves__>:
    213e:	2f 92       	push	r2
    2140:	3f 92       	push	r3
    2142:	4f 92       	push	r4
    2144:	5f 92       	push	r5
    2146:	6f 92       	push	r6
    2148:	7f 92       	push	r7
    214a:	8f 92       	push	r8
    214c:	9f 92       	push	r9
    214e:	af 92       	push	r10
    2150:	bf 92       	push	r11
    2152:	cf 92       	push	r12
    2154:	df 92       	push	r13
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	ca 1b       	sub	r28, r26
    2168:	db 0b       	sbc	r29, r27
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	09 94       	ijmp

00002176 <__epilogue_restores__>:
    2176:	2a 88       	ldd	r2, Y+18	; 0x12
    2178:	39 88       	ldd	r3, Y+17	; 0x11
    217a:	48 88       	ldd	r4, Y+16	; 0x10
    217c:	5f 84       	ldd	r5, Y+15	; 0x0f
    217e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2180:	7d 84       	ldd	r7, Y+13	; 0x0d
    2182:	8c 84       	ldd	r8, Y+12	; 0x0c
    2184:	9b 84       	ldd	r9, Y+11	; 0x0b
    2186:	aa 84       	ldd	r10, Y+10	; 0x0a
    2188:	b9 84       	ldd	r11, Y+9	; 0x09
    218a:	c8 84       	ldd	r12, Y+8	; 0x08
    218c:	df 80       	ldd	r13, Y+7	; 0x07
    218e:	ee 80       	ldd	r14, Y+6	; 0x06
    2190:	fd 80       	ldd	r15, Y+5	; 0x05
    2192:	0c 81       	ldd	r16, Y+4	; 0x04
    2194:	1b 81       	ldd	r17, Y+3	; 0x03
    2196:	aa 81       	ldd	r26, Y+2	; 0x02
    2198:	b9 81       	ldd	r27, Y+1	; 0x01
    219a:	ce 0f       	add	r28, r30
    219c:	d1 1d       	adc	r29, r1
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	ed 01       	movw	r28, r26
    21aa:	08 95       	ret

000021ac <strcmp>:
    21ac:	fb 01       	movw	r30, r22
    21ae:	dc 01       	movw	r26, r24
    21b0:	8d 91       	ld	r24, X+
    21b2:	01 90       	ld	r0, Z+
    21b4:	80 19       	sub	r24, r0
    21b6:	01 10       	cpse	r0, r1
    21b8:	d9 f3       	breq	.-10     	; 0x21b0 <strcmp+0x4>
    21ba:	99 0b       	sbc	r25, r25
    21bc:	08 95       	ret

000021be <_exit>:
    21be:	f8 94       	cli

000021c0 <__stop_program>:
    21c0:	ff cf       	rjmp	.-2      	; 0x21c0 <__stop_program>
